name: Release

on:
  push:
    tags:
      - "v*.*.*" # Trigger on version tags like v1.2.3

jobs:
  build-native:
    name: Build native libraries
    runs-on: ${{ matrix.os }}
    permissions: {}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            source_artifact_name: libprinters_js.so
            dest_artifact_name: libprinters_js-x64.so
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            source_artifact_name: libprinters_js.so
            dest_artifact_name: libprinters_js-arm64.so
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            source_artifact_name: printers_js.dll
            dest_artifact_name: printers_js-x64.dll
          - target: x86_64-apple-darwin
            os: macos-13
            source_artifact_name: libprinters_js.dylib
            dest_artifact_name: libprinters_js-x64.dylib
          - target: aarch64-apple-darwin
            os: macos-latest
            source_artifact_name: libprinters_js.dylib
            dest_artifact_name: libprinters_js-arm64.dylib
    steps:
      # Speed up apt-get operations by disabling unnecessary man-db auto-update
      - name: Disable man-db auto-update
        if: runner.os == 'Linux'
        run: |
          echo "man-db man-db/auto-update boolean false" | sudo debconf-set-selections
          sudo rm -f /var/lib/man-db/auto-update
      - uses: actions/checkout@v5
      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache: false
      - name: Install system dependencies for Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libcups2-dev pkg-config clang
      - name: Install cross for ARM64 cross-compilation
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          cargo install cross
      - name: Build native library
        shell: bash
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi

          # Debug: Check what was actually built
          echo "Contents of target/${{ matrix.target }}/release:"
          ls -la target/${{ matrix.target }}/release/ || dir target\\${{ matrix.target }}\\release\\ 2>/dev/null || echo "Release directory not found"
      - name: Prepare artifact for target/release structure
        shell: bash
        run: |
          mkdir -p target/release

          # Debug: Check source file exists before copying
          SOURCE_FILE="target/${{ matrix.target }}/release/${{ matrix.source_artifact_name }}"
          echo "Looking for source file: $SOURCE_FILE"
          if [ -f "$SOURCE_FILE" ]; then
            echo "Source file exists, copying to target/release/${{ matrix.dest_artifact_name }}"
            cp "$SOURCE_FILE" target/release/${{ matrix.dest_artifact_name }}
            echo "Copy successful. Contents of target/release:"
            ls -la target/release/ || dir target\\release\\ 2>/dev/null
          else
            echo "ERROR: Source file $SOURCE_FILE does not exist!"
            echo "All files in target/${{ matrix.target }}/release/:"
            ls -la target/${{ matrix.target }}/release/ || dir target\\${{ matrix.target }}\\release\\ 2>/dev/null || echo "Directory not found"
            exit 1
          fi
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: target-release-${{ matrix.target }}
          path: |
            target/release/*.so
            target/release/*.dll
            target/release/*.dylib
          if-no-files-found: error

  build-napi:
    name: Build N-API modules
    runs-on: ${{ matrix.settings.host }}
    permissions: {}
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-13
            target: x86_64-apple-darwin
            npm_platform: darwin-x64
          - host: macos-14
            target: aarch64-apple-darwin
            npm_platform: darwin-arm64
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            npm_platform: win32-x64-msvc
          - host: windows-11-arm
            target: aarch64-pc-windows-msvc
            npm_platform: win32-arm64-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            npm_platform: linux-x64-gnu
          - host: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
            npm_platform: linux-arm64-gnu
    steps:
      # Speed up apt-get operations by disabling unnecessary man-db auto-update
      - name: Disable man-db auto-update
        if: runner.os == 'Linux'
        run: |
          echo "man-db man-db/auto-update boolean false" | sudo debconf-set-selections
          sudo rm -f /var/lib/man-db/auto-update
      - uses: actions/checkout@v5
      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: 20
          package-manager-cache: false
      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache: false
      # Install Task runner for building
      - name: Setup Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libcups2-dev pkg-config clang
      - name: Install dependencies
        run: npm ci
      - name: Build
        shell: bash
        run: |
          # Our build script auto-detects the platform and builds for the current target
          echo "Building for target: ${{ matrix.settings.target }}"
          task build:napi
          
          # Remove all NPM directory contents except the current platform (cross-platform)
          cd npm/
          for dir in */; do
            if [ -d "$dir" ] && [ "$dir" != "${{ matrix.settings.npm_platform }}/" ]; then
              echo "Removing directory: $dir"
              rm -rf "$dir"
            fi
          done
          cd ..
          
          echo "Contents of npm/${{ matrix.settings.npm_platform }}:"
          if [ "$RUNNER_OS" = "Windows" ]; then
            dir "npm\\${{ matrix.settings.npm_platform }}\\" 2>/dev/null || echo "Directory listing failed"
          else
            ls -la "npm/${{ matrix.settings.npm_platform }}/" || echo "Directory listing failed"
          fi
          
          # Ensure there's a second file in the NPM directory to avoid upload-artifact stripping the target directory
          touch npm/ignore.txt
      - name: Upload N-API artifact
        uses: actions/upload-artifact@v4
        with:
          name: npm-binaries-${{ matrix.settings.target }}
          path: npm/
          if-no-files-found: error

  test-targets:
    name: Cross-runtime test on ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}
    needs: [build-napi, build-native]
    permissions: {}
    strategy:
      fail-fast: false
      matrix:
        # We can't run the cross-runtime tests on Windows ARM runners because Deno and Bun do not have ARM64 Windows builds
        settings:
          - host: macos-13
            target: x86_64-apple-darwin
          - host: macos-14
            target: aarch64-apple-darwin
          - host: windows-latest
            target: x86_64-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - host: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
    steps:
      # Speed up apt-get operations by disabling unnecessary man-db auto-update
      - name: Disable man-db auto-update and install deps
        if: runner.os == 'Linux'
        run: |
          echo "man-db man-db/auto-update boolean false" | sudo debconf-set-selections
          sudo rm -f /var/lib/man-db/auto-update
          sudo apt-get update
          sudo apt-get install -y libcups2-dev pkg-config clang
      - uses: actions/checkout@v5
      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x
          cache: false
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
          no-cache: true
      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: 20
          package-manager-cache: false
      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache: false
      # Install Task runner
      - name: Setup Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Download all native binary artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: target-release-*
          path: target/release
          merge-multiple: true
      - name: Download all N-API binary artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: npm-binaries-*
          path: npm-temp
      - name: Reconstruct npm directory structure
        shell: bash
        run: |
          mkdir -p npm
          # Move each platform's files to the correct npm subdirectory
          for artifact_dir in npm-temp/npm-binaries-*/; do
            if [ -d "$artifact_dir" ]; then
              # Copy the platform directory contents to npm/
              cp -r "$artifact_dir"* npm/ 2>/dev/null || true
            fi
          done
          ls -la npm/ 2>/dev/null || dir npm
      - name: Install Node.js dependencies
        run: npm ci
      - name: Run comprehensive tests
        run: task test

  publish:
    name: Publish to ${{ matrix.registry }}
    runs-on: ubuntu-latest
    needs: test-targets
    permissions:
      contents: write
      id-token: write
    strategy:
      matrix:
        include:
          - registry: jsr
            publish_command: "deno publish --allow-dirty --no-check"
            env_vars: {}
          - registry: npm
            publish_command: "npm publish --access public"
    steps:
      - uses: actions/checkout@v5
      - name: Setup Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Deno
        if: matrix.registry == 'jsr'
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x
          cache: false
      - name: Setup Node
        if: matrix.registry == 'npm'
        uses: actions/setup-node@v5
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/
          package-manager-cache: false
      - name: Download all native binary artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: target-release-*
          path: target/release
          merge-multiple: true
      - name: Install Node.js dependencies
        if: matrix.registry == 'npm'
        run: npm ci
      - name: Download all N-API binary artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: npm-binaries-*
          path: npm-temp
      - name: Reconstruct npm directory structure
        shell: bash
        run: |
          mkdir -p npm
          # Move each platform's files to the correct npm subdirectory
          for artifact_dir in npm-temp/npm-binaries-*/; do
            if [ -d "$artifact_dir" ]; then
              # Copy the platform directory contents to npm/
              cp -r "$artifact_dir"* npm/ 2>/dev/null || true
            fi
          done
          ls -la npm/ 2>/dev/null || dir npm
      - name: Prepare package.json for npm publish
        if: matrix.registry == 'npm'
        run: task prepublish
      - name: Publish to ${{ matrix.registry }}
        run: ${{ matrix.publish_command }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
