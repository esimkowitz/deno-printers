name: Release

on:
  release:
    types: [created]
  workflow_dispatch:

jobs:
  test-cross-runtime:
    name: Test all runtimes
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      # Speed up apt-get operations by disabling unnecessary man-db auto-update
      - name: Disable man-db auto-update
        run: |
          echo "man-db man-db/auto-update boolean false" | sudo debconf-set-selections
          sudo rm -f /var/lib/man-db/auto-update

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libcups2-dev pkg-config

      - name: Install Node.js dependencies
        run: npm ci

      - name: Build all runtimes
        run: ./scripts/build-all.sh

      - name: Run comprehensive tests
        run: ./scripts/test-all.sh

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: test-results/

  build-native:
    name: Build native libraries
    runs-on: ${{ matrix.os }}
    needs: test-cross-runtime
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: libdeno_printers.so
            release_name: libdeno_printers-linux-amd64.so
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: libdeno_printers.so
            release_name: libdeno_printers-linux-arm64.so
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            artifact_name: deno_printers.dll
            release_name: deno_printers-windows-amd64.dll
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            artifact_name: deno_printers.dll
            release_name: deno_printers-windows-arm64.dll
          - target: aarch64-apple-darwin
            os: macos-latest
            artifact_name: libdeno_printers.dylib
            release_name: libdeno_printers-macos-arm64.dylib

    steps:
      - uses: actions/checkout@v5

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # Speed up apt-get operations by disabling unnecessary man-db auto-update
      - name: Disable man-db auto-update
        if: runner.os == 'Linux'
        run: |
          echo "man-db man-db/auto-update boolean false" | sudo debconf-set-selections
          sudo rm -f /var/lib/man-db/auto-update

      - name: Install system dependencies for Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libcups2-dev pkg-config

      - name: Install cross for ARM64 cross-compilation
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      - name: Build native library
        shell: bash
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi

      - name: Prepare artifact
        shell: bash
        run: |
          mkdir -p artifacts
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} artifacts/${{ matrix.release_name }}

      - name: Generate checksum
        shell: bash
        run: |
          cd artifacts
          if command -v sha256sum >/dev/null 2>&1; then
            sha256sum ${{ matrix.release_name }} > ${{ matrix.release_name }}.sha256
          else
            shasum -a 256 ${{ matrix.release_name }} > ${{ matrix.release_name }}.sha256
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: artifacts/*

  publish-jsr:
    name: Publish to JSR
    runs-on: ubuntu-latest
    needs: build-native
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v5

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Organize binaries
        run: |
          mkdir -p target/release

          # Copy and rename binaries with architecture suffixes
          cp artifacts/x86_64-unknown-linux-gnu/libdeno_printers-linux-amd64.so target/release/libdeno_printers.so
          cp artifacts/aarch64-unknown-linux-gnu/libdeno_printers-linux-arm64.so target/release/libdeno_printers-arm64.so
          cp artifacts/x86_64-pc-windows-msvc/deno_printers-windows-amd64.dll target/release/deno_printers.dll
          cp artifacts/aarch64-pc-windows-msvc/deno_printers-windows-arm64.dll target/release/deno_printers-arm64.dll
          cp artifacts/aarch64-apple-darwin/libdeno_printers-macos-arm64.dylib target/release/libdeno_printers.dylib

          ls -la target/release/

      - name: Publish to JSR
        run: deno publish --allow-dirty

  build-napi:
    name: Build N-API modules
    runs-on: ${{ matrix.settings.host }}
    needs: test-cross-runtime
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin

          - host: macos-latest
            target: aarch64-apple-darwin

          - host: windows-latest
            target: x86_64-pc-windows-msvc

          - host: windows-latest
            target: aarch64-pc-windows-msvc

          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian

          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64

    steps:
      - uses: actions/checkout@v5

      - name: Setup node
        uses: actions/setup-node@v4
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 20
          cache: npm

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # Speed up apt-get operations by disabling unnecessary man-db auto-update
      - name: Disable man-db auto-update
        if: matrix.settings.docker && runner.os == 'Linux'
        run: |
          echo "man-db man-db/auto-update boolean false" | sudo debconf-set-selections
          sudo rm -f /var/lib/man-db/auto-update

      - name: Install dependencies
        if: matrix.settings.docker && runner.os == 'Linux'
        run: |
          apt-get update
          apt-get install -y libcups2-dev pkg-config

      - name: Install dependencies
        run: npm ci

      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: "--user 0:0 -v ${{ github.workspace }}/.cargo-cache:/root/.cargo/registry/cache -v ${{ github.workspace }}/.cargo:/root/.cargo -v ${{ github.workspace }}:/build -w /build"
          run: npm run build -- --target ${{ matrix.settings.target }}

      - name: Build
        run: npm run build -- --target ${{ matrix.settings.target }}
        if: ${{ !matrix.settings.docker }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: napi/*.node
          if-no-files-found: error

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: build-napi
    steps:
      - uses: actions/checkout@v5

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          registry-url: https://registry.npmjs.org/

      - name: Install dependencies
        run: npm ci

      - name: Download all N-API artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Move N-API artifacts
        run: |
          mkdir -p napi
          for dir in artifacts/bindings-*; do
            if [ -d "$dir" ]; then
              cp "$dir"/*.node napi/ 2>/dev/null || true
            fi
          done
          ls -la napi/

      - name: Test Node.js package before publishing
        run: PRINTERS_JS_SIMULATE=true npm test

      - name: Publish to NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
