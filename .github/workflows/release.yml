name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v1.2.3

jobs:
  test-cross-runtime:
    name: Test all runtimes
    runs-on: ubuntu-latest
    env:
      PRINTERS_JS_SIMULATE: true # Force simulation mode for all tests
      CARGO_TERM_COLOR: always
    permissions: {}
    steps:
      - uses: actions/checkout@v5

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x
          cache: false

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
          no-cache: true

      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: 20
          package-manager-cache: false

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache: false

      # Speed up apt-get operations by disabling unnecessary man-db auto-update
      - name: Disable man-db auto-update
        run: |
          echo "man-db man-db/auto-update boolean false" | sudo debconf-set-selections
          sudo rm -f /var/lib/man-db/auto-update

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libcups2-dev pkg-config clang

      - name: Install Node.js dependencies
        run: npm ci

      - name: Build all runtimes
        run: deno task build:all

      - name: Run comprehensive tests
        run: deno task test:all

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: test-results/

  build-native:
    name: Build native libraries
    runs-on: ${{ matrix.os }}
    needs: test-cross-runtime
    permissions: {}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: libprinters_js.so
            release_name: libprinters_js-linux-amd64.so
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: libprinters_js.so
            release_name: libprinters_js-linux-arm64.so
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            artifact_name: printers_js.dll
            release_name: printers_js-windows-amd64.dll
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            artifact_name: printers_js.dll
            release_name: printers_js-windows-arm64.dll
          - target: aarch64-apple-darwin
            os: macos-latest
            artifact_name: libprinters_js.dylib
            release_name: libprinters_js-macos-arm64.dylib

    steps:
      - uses: actions/checkout@v5

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache: false

      # Speed up apt-get operations by disabling unnecessary man-db auto-update
      - name: Disable man-db auto-update
        if: runner.os == 'Linux'
        run: |
          echo "man-db man-db/auto-update boolean false" | sudo debconf-set-selections
          sudo rm -f /var/lib/man-db/auto-update

      - name: Install system dependencies for Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libcups2-dev pkg-config clang

      - name: Install cross for ARM64 cross-compilation
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          cargo install cross

      - name: Build native library
        shell: bash
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi

      - name: Prepare artifact
        shell: bash
        run: |
          mkdir -p artifacts
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} artifacts/${{ matrix.release_name }}

      - name: Generate checksum
        shell: bash
        run: |
          cd artifacts
          if command -v sha256sum >/dev/null 2>&1; then
            sha256sum ${{ matrix.release_name }} > ${{ matrix.release_name }}.sha256
          else
            shasum -a 256 ${{ matrix.release_name }} > ${{ matrix.release_name }}.sha256
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: artifacts/*

  build-napi:
    name: Build N-API modules
    runs-on: ${{ matrix.settings.host }}
    needs: test-cross-runtime
    permissions: {}
    strategy:
      fail-fast: false
      matrix:
        settings:
          # macOS builds
          - host: macos-13 # Intel Mac
            target: x86_64-apple-darwin

          - host: macos-14 # Apple Silicon
            target: aarch64-apple-darwin

          # Windows builds
          - host: windows-latest
            target: x86_64-pc-windows-msvc

          # Windows ARM64 - use native ARM64 runner
          - host: windows-11-arm
            target: aarch64-pc-windows-msvc

          # Linux builds
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu

          # Linux ARM64 - use native ARM64 runner
          - host: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu

    steps:
      - uses: actions/checkout@v5

      # Speed up apt-get operations by disabling unnecessary man-db auto-update
      - name: Disable man-db auto-update
        if: runner.os == 'Linux'
        run: |
          echo "man-db man-db/auto-update boolean false" | sudo debconf-set-selections
          sudo rm -f /var/lib/man-db/auto-update

      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: 20
          package-manager-cache: false

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache: false

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libcups2-dev pkg-config clang

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: |
          # For cross-compilation, we need to ensure the correct target is used
          echo "Building for target: ${{ matrix.settings.target }}"
          npm run build -- --target ${{ matrix.settings.target }}

      - name: Debug build output
        shell: bash
        run: |
          echo "Contents of current directory:"
          ls -la
          echo "Contents of napi/ directory (if it exists):"
          ls -la napi/ || echo "napi/ directory does not exist"
          echo "Looking for .node files:"
          find . -name "*.node" -type f || echo "No .node files found"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: napi/*.node
          if-no-files-found: error

      # Upload index.js and index.d.ts only once (from the first job that completes)
      - name: Upload N-API JavaScript files
        if: matrix.settings.target == 'x86_64-apple-darwin'
        uses: actions/upload-artifact@v4
        with:
          name: napi-js-files
          path: |
            napi/index.js
            napi/index.d.ts
          if-no-files-found: error

  publish-jsr:
    name: Publish to JSR
    runs-on: ubuntu-latest
    needs: [build-native, build-napi]
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v5

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x
          cache: false

      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts

      - name: Organize binaries
        run: |
          mkdir -p target/release
          mkdir -p napi

          # Copy FFI binaries for Deno/Bun
          cp artifacts/x86_64-unknown-linux-gnu/libprinters_js-linux-amd64.so target/release/libprinters_js.so
          cp artifacts/aarch64-unknown-linux-gnu/libprinters_js-linux-arm64.so target/release/libprinters_js-arm64.so
          cp artifacts/x86_64-pc-windows-msvc/printers_js-windows-amd64.dll target/release/printers_js.dll
          cp artifacts/aarch64-pc-windows-msvc/printers_js-windows-arm64.dll target/release/printers_js-arm64.dll
          cp artifacts/aarch64-apple-darwin/libprinters_js-macos-arm64.dylib target/release/libprinters_js.dylib

          # Copy N-API JavaScript files (index.js and index.d.ts)
          if [ -d "artifacts/napi-js-files" ]; then
            cp artifacts/napi-js-files/* napi/
          fi

          # Copy N-API platform-specific binaries
          for dir in artifacts/bindings-*; do
            if [ -d "$dir" ]; then
              cp "$dir"/*.node napi/ 2>/dev/null || true
            fi
          done

          echo "FFI binaries:"
          ls -la target/release/
          echo "N-API binaries and files:"
          ls -la napi/

      - name: Publish to JSR
        run: deno publish --allow-dirty --no-check

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [build-native, build-napi]
    env:
      PRINTERS_JS_SIMULATE: true # Force simulation mode for tests
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/
          package-manager-cache: false

      - name: Install dependencies
        run: npm ci

      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts

      - name: Organize all binaries
        run: |
          mkdir -p target/release
          mkdir -p napi

          # Copy FFI binaries for Deno/Bun
          cp artifacts/x86_64-unknown-linux-gnu/libprinters_js-linux-amd64.so target/release/libprinters_js.so
          cp artifacts/aarch64-unknown-linux-gnu/libprinters_js-linux-arm64.so target/release/libprinters_js-arm64.so
          cp artifacts/x86_64-pc-windows-msvc/printers_js-windows-amd64.dll target/release/printers_js.dll
          cp artifacts/aarch64-pc-windows-msvc/printers_js-windows-arm64.dll target/release/printers_js-arm64.dll
          cp artifacts/aarch64-apple-darwin/libprinters_js-macos-arm64.dylib target/release/libprinters_js.dylib

          # Copy N-API JavaScript files (index.js and index.d.ts)
          if [ -d "artifacts/napi-js-files" ]; then
            cp artifacts/napi-js-files/* napi/
          fi

          # Copy N-API platform-specific binaries
          for dir in artifacts/bindings-*; do
            if [ -d "$dir" ]; then
              cp "$dir"/*.node napi/ 2>/dev/null || true
            fi
          done

          echo "FFI binaries:"
          ls -la target/release/
          echo "N-API binaries and files:"
          ls -la napi/

      - name: Test Node.js package before publishing
        run: PRINTERS_JS_SIMULATE=true npm test

      - name: Publish to NPM
        run: npm publish --access public
