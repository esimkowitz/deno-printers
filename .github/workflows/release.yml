name: Release

on:
  release:
    types: [created]

jobs:
  build-native:
    name: Build native libraries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: libdeno_printers.so
            release_name: libdeno_printers-linux-amd64.so
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: libdeno_printers.so
            release_name: libdeno_printers-linux-arm64.so
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            artifact_name: deno_printers.dll
            release_name: deno_printers-windows-amd64.dll
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            artifact_name: deno_printers.dll
            release_name: deno_printers-windows-arm64.dll
          - target: aarch64-apple-darwin
            os: macos-latest
            artifact_name: libdeno_printers.dylib
            release_name: libdeno_printers-macos-arm64.dylib

    steps:
      - uses: actions/checkout@v5

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      - name: Build native library
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare artifact
        shell: bash
        run: |
          mkdir -p artifacts
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} artifacts/${{ matrix.release_name }}

      - name: Generate checksum
        shell: bash
        run: |
          cd artifacts
          if command -v sha256sum >/dev/null 2>&1; then
            sha256sum ${{ matrix.release_name }} > ${{ matrix.release_name }}.sha256
          else
            shasum -a 256 ${{ matrix.release_name }} > ${{ matrix.release_name }}.sha256
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: artifacts/*

  publish-jsr:
    name: Publish to JSR
    runs-on: ubuntu-latest
    needs: build-native
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v5

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Organize binaries
        run: |
          mkdir -p target/release

          # Copy and rename binaries with architecture suffixes
          cp x86_64-unknown-linux-gnu/libdeno_printers-linux-amd64.so target/release/libdeno_printers.so
          cp aarch64-unknown-linux-gnu/libdeno_printers-linux-arm64.so target/release/libdeno_printers-arm64.so
          cp x86_64-pc-windows-msvc/deno_printers-windows-amd64.dll target/release/deno_printers.dll
          cp aarch64-pc-windows-msvc/deno_printers-windows-arm64.dll target/release/deno_printers-arm64.dll
          cp aarch64-apple-darwin/libdeno_printers-macos-arm64.dylib target/release/libdeno_printers.dylib

          ls -la target/release/

      - name: Publish to JSR
        run: deno publish
        env:
          JSR_TOKEN: ${{ secrets.JSR_TOKEN }}

  update-release:
    name: Update GitHub Release
    runs-on: ubuntu-latest
    needs: build-native
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create release artifacts
        run: |
          mkdir -p release-assets

          # Copy all binaries and checksums
          find . -name "*.so" -o -name "*.dll" -o -name "*.dylib" -o -name "*.sha256" | while read file; do
            cp "$file" release-assets/
          done

          # Create combined checksums file
          cd release-assets
          cat *.sha256 > checksums.txt
          rm *.sha256

          ls -la

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          files: release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
