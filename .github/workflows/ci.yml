name: Build

on:
  push:
    branches:
      - main
  pull_request_target:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      PRINTERS_JS_SIMULATE: true # Force simulation mode for all tests
      CARGO_TERM_COLOR: always
    steps:
      - name: Checkout base branch
        if: ${{ github.event_name == 'push' }}
        uses: actions/checkout@v5

      - name: Checkout merge commit
        if: ${{ github.event_name == 'pull_request_target' }}
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      # Speed up apt-get operations by disabling unnecessary man-db auto-update
      - name: Disable man-db auto-update
        run: |
          echo "man-db man-db/auto-update boolean false" | sudo debconf-set-selections
          sudo rm -f /var/lib/man-db/auto-update

      # Install system dependencies for Linux printing
      - name: Install CUPS development libraries
        run: |
          sudo apt-get update
          sudo apt-get install -y libcups2-dev pkg-config clang

      # Setup Rust toolchain for building native library
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      # Install cargo-llvm-cov for code coverage
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      # Install cargo2junit for JUnit XML output from Cargo tests
      - name: Install cargo2junit
        run: cargo install cargo2junit

      # Cache Rust dependencies for faster builds
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # Setup Deno
      - uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x # Run with latest stable Deno.
          cache: true

      # Setup Node.js for N-API module and testing
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      # Setup Bun for cross-runtime testing
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      # Code quality checks
      - name: Check Rust formatting
        run: cargo fmt --check

      - name: Run Rust linter (Clippy)
        run: cargo clippy -- -D warnings

      - name: Check Deno formatting
        run: deno fmt --check

      - name: Run Deno linter
        run: deno lint

      # Install Node.js dependencies
      - name: Install Node.js dependencies
        run: npm install

      # Build all runtime libraries using our comprehensive script
      - name: Build all runtime libraries
        run: ./scripts/build-all.sh

      # Run Cargo tests with coverage (Rust-level tests)
      - name: Run Cargo tests with coverage
        run: |
          mkdir -p test-results/coverage
          cargo llvm-cov --all-features --workspace --lcov --output-path test-results/coverage/rust.lcov test

      # Generate Cargo test JUnit report
      - name: Generate Cargo test JUnit report
        run: |
          mkdir -p test-results
          RUSTC_BOOTSTRAP=1 cargo test -- -Z unstable-options --format json --report-time | cargo2junit > test-results/cargo.xml

      # Run comprehensive cross-runtime tests using our test-all.sh script
      - name: Run cross-runtime tests
        run: ./scripts/test-all.sh

      - name: Upload Test Reports
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: test-results/*.xml

      - name: Upload Coverage Reports
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: test-results/coverage/*

  report:
    if: ${{ always() && github.event_name == 'pull_request_target' }}
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      pull-requests: write
      actions: read
      checks: write
    steps:
      - name: Checkout merge commit
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      # Speed up apt-get operations by disabling unnecessary man-db auto-update
      - name: Disable man-db auto-update
        run: |
          echo "man-db man-db/auto-update boolean false" | sudo debconf-set-selections
          sudo rm -f /var/lib/man-db/auto-update

      - uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x # Run with latest stable Deno.

      - uses: actions/download-artifact@v5

      - name: Convert JUnit XML to CTRF
        run: |
          mkdir -p test-results/ctrf
          deno run -A npm:junit-to-ctrf "test-reports/*.xml" -o test-results/ctrf/junit.json

      - name: Publish Cross-Runtime Test Report
        uses: ctrf-io/github-test-reporter@v1
        with:
          title: Cross-Runtime Printer Library Test Report
          report-path: "./test-results/ctrf/*.json"
          pull-request-report: true
          flaky-rate-report: true
          pull-request: true
          overwrite-comment: true
          status-check: true
          status-check-name: "Cross-Runtime Tests (Deno/Bun/Node.js)"
          annotate: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup LCOV
        uses: hrishikesh-kadam/setup-lcov@v1

      # Create combined coverage report from all runtimes
      - name: Combine coverage reports
        run: |
          echo "Combining coverage reports from all runtimes..."
          cd coverage-reports

          # Create individual reports and combined report
          if [ -f rust.lcov ]; then
            cp rust.lcov combined.lcov
          else
            touch combined.lcov
          fi

          if [ -f deno-lcov.info ]; then
            cat deno-lcov.info >> combined.lcov
          fi

          # Note: Bun coverage is in different format, handled separately
          echo "Coverage files available:"
          ls -la

      # Report coverage for each runtime separately
      - name: Report Rust code coverage
        if: ${{ hashFiles('coverage-reports/rust.lcov') != '' }}
        uses: zgosalvez/github-actions-report-lcov@v4
        with:
          title-prefix: "ü¶Ä [Rust Core]"
          coverage-files: coverage-reports/rust.lcov
          artifact-name: rust-coverage-report
          github-token: ${{ secrets.GITHUB_TOKEN }}
          update-comment: true

      - name: Report Deno code coverage
        if: ${{ hashFiles('coverage-reports/deno-lcov.info') != '' }}
        uses: zgosalvez/github-actions-report-lcov@v4
        with:
          title-prefix: "ü¶ï [Deno FFI]"
          coverage-files: coverage-reports/deno-lcov.info
          artifact-name: deno-coverage-report
          github-token: ${{ secrets.GITHUB_TOKEN }}
          update-comment: true

      - name: Report Combined coverage
        if: ${{ hashFiles('coverage-reports/combined.lcov') != '' }}
        uses: zgosalvez/github-actions-report-lcov@v4
        with:
          title-prefix: "üìä [Combined Coverage]"
          coverage-files: coverage-reports/combined.lcov
          artifact-name: combined-coverage-report
          github-token: ${{ secrets.GITHUB_TOKEN }}
          update-comment: true

      # Add/update dynamic test summary comment based on actual results
      - name: Update Test Summary Comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Function to parse JUnit XML
            function parseJUnit(xmlContent) {
              const testMatch = xmlContent.match(/<testsuite[^>]*tests="(\d+)"[^>]*errors="(\d+)"[^>]*failures="(\d+)"/);
              if (testMatch) {
                return {
                  total: parseInt(testMatch[1]),
                  errors: parseInt(testMatch[2]),
                  failures: parseInt(testMatch[3]),
                  passed: parseInt(testMatch[1]) - parseInt(testMatch[2]) - parseInt(testMatch[3])
                };
              }
              return { total: 0, errors: 0, failures: 0, passed: 0 };
            }

            // Function to format test result
            function formatTestResult(result) {
              const total = result.passed + result.failures + result.errors;
              const status = result.failures === 0 && result.errors === 0 ? '‚úÖ' : '‚ùå';
              return { status, text: `${result.passed}/${total} passed` };
            }

            // Generate the summary content
            let summary = `## üß™ Cross-Runtime Test Results\n\n`;
            summary += `This PR was tested across **3 JavaScript runtimes**:\n\n`;
            summary += `| Runtime | Status | Tests | Coverage |\n`;
            summary += `|---------|--------|-------|----------|\n`;

            // Read Deno test results
            let denoResult = { status: '‚ùì', text: 'Not found' };
            try {
              if (fs.existsSync('test-reports/deno-test-results.xml')) {
                const denoXml = fs.readFileSync('test-reports/deno-test-results.xml', 'utf8');
                const parsed = parseJUnit(denoXml);
                denoResult = formatTestResult(parsed);
              }
            } catch (e) {
              console.log('Error reading Deno results:', e.message);
            }

            // Read Rust/Cargo test results
            let rustResult = { status: '‚ùì', text: 'Not found' };
            try {
              if (fs.existsSync('test-reports/cargo.xml')) {
                const cargoXml = fs.readFileSync('test-reports/cargo.xml', 'utf8');
                const parsed = parseJUnit(cargoXml);
                rustResult = formatTestResult(parsed);
              }
            } catch (e) {
              console.log('Error reading Rust results:', e.message);
            }

            // Read Bun test results
            let bunResult = { status: '‚ùì', text: 'Not found' };
            try {
              if (fs.existsSync('test-reports/bun-test-results.xml')) {
                const bunXml = fs.readFileSync('test-reports/bun-test-results.xml', 'utf8');
                const parsed = parseJUnit(bunXml);
                bunResult = formatTestResult(parsed);
              }
            } catch (e) {
              console.log('Error reading Bun results:', e.message);
            }

            // Read Node.js test results
            let nodeResult = { status: '‚ùì', text: 'Not found' };
            try {
              if (fs.existsSync('test-reports/node-test-results.xml')) {
                const nodeXml = fs.readFileSync('test-reports/node-test-results.xml', 'utf8');
                const parsed = parseJUnit(nodeXml);
                nodeResult = formatTestResult(parsed);
              }
            } catch (e) {
              console.log('Error reading Node.js results:', e.message);
            }

            // Check for coverage files
            const denoCoverage = fs.existsSync('coverage-reports/deno-lcov.info') ? 'LCOV available' : 'No coverage';
            const rustCoverage = fs.existsSync('coverage-reports/rust.lcov') ? 'LCOV available' : 'No coverage';
            const bunCoverage = fs.existsSync('coverage-reports/bun') ? 'Coverage available' : 'No coverage';

            summary += `| ü¶ï **Deno** | ${denoResult.status} FFI | ${denoResult.text} | ${denoCoverage} |\n`;
            summary += `| ü¶Ä **Rust Core** | ${rustResult.status} Native | ${rustResult.text} | ${rustCoverage} |\n`;
            summary += `| ü•ñ **Bun** | ${bunResult.status} FFI | ${bunResult.text} | ${bunCoverage} |\n`;
            summary += `| üü¢ **Node.js** | ${nodeResult.status} N-API | ${nodeResult.text} | N-API fallback |\n\n`;

            // List available artifacts
            summary += `### üìä Test Artifacts Generated\n\n`;
            const testFiles = fs.existsSync('test-reports') ? fs.readdirSync('test-reports') : [];
            const coverageFiles = fs.existsSync('coverage-reports') ? fs.readdirSync('coverage-reports') : [];

            if (testFiles.length > 0) {
              summary += `**JUnit Reports**: ${testFiles.filter(f => f.endsWith('.xml')).join(', ')}\n\n`;
            }

            if (coverageFiles.length > 0) {
              summary += `**Coverage Reports**: ${coverageFiles.join(', ')}\n\n`;
            }

            summary += `### üîß Architecture\n\n`;
            summary += `- **Deno & Bun**: Use FFI ‚Üí Rust native library\n`;
            summary += `- **Node.js**: Uses simulation mode (N-API module has compatibility issues)\n`;
            summary += `- **Universal API**: Consistent interface across all runtimes\n\n`;

            // Overall status
            const overallSuccess = denoResult.status === '‚úÖ' && rustResult.status === '‚úÖ';
            const overallStatus = overallSuccess ? '‚úÖ All tests passing' : '‚ùå Some tests failed';
            summary += `**Overall Status**: ${overallStatus}\n\n`;

            // Add timestamp and run info
            const timestamp = new Date().toISOString().replace('T', ' ').substring(0, 19);
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            summary += `*Last updated: ${timestamp} UTC | [View CI Run](${runUrl})* ü§ñ`;

            // Look for existing comment from this bot
            const COMMENT_IDENTIFIER = '## üß™ Cross-Runtime Test Results';

            try {
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });

              // Find existing test results comment
              const existingComment = comments.data.find(comment =>
                comment.user.type === 'Bot' &&
                comment.body.includes(COMMENT_IDENTIFIER)
              );

              if (existingComment) {
                // Update existing comment
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existingComment.id,
                  body: summary
                });
                console.log('Updated existing test results comment');
              } else {
                // Create new comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: summary
                });
                console.log('Created new test results comment');
              }
            } catch (error) {
              console.error('Error managing comment:', error);
              // Fallback: try to create a new comment
              try {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: summary
                });
                console.log('Created fallback comment');
              } catch (fallbackError) {
                console.error('Fallback comment creation failed:', fallbackError);
              }
            }
